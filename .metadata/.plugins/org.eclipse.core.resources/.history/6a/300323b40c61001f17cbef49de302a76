/*
 * CLI-FATFS-commands.c
 *
 * Implements CLI commands for the fatFs
 *
 * See https://github.com/FreeRTOS/FreeRTOS/blob/520fc225eb2dd5e21c951ca325e1c51eed3a5c13/FreeRTOS-Plus/Demo/Common/FreeRTOS_Plus_CLI_Demos/File-Related-CLI-commands.c
 *
 *  Created on: 20 Aug 2024
 *      Author: CGP
 *
 * FatFs commands are documented here:
 * 		http://elm-chan.org/fsw/ff/
 *
 */


/*************************************** Includes *******************************************/

/* Modified by Maxim Integrated 26-Jun-2015 to quiet compiler warnings */
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "FreeRTOS_CLI.h"


#include "ff.h"
#include "ffconf.h"

/*************************************** Definitions *******************************************/


/*************************************** External variables *******************************************/

/*************************************** Local variables *******************************************/

/*************************************** Local routine prototypes  *************************************/

static void vRegisterCLICommands( void );

/*
 * Defines a command that returns a table showing the state of each task at the
 * time the command is called.
 */
static BaseType_t prvInfoCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString );
static BaseType_t prvLsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString );
static BaseType_t prvPwdCommand( char * pcWriteBuffer, size_t xWriteBufferLen, const char * pcCommandString );
static BaseType_t prvChdirCommand( char * pcWriteBuffer, size_t xWriteBufferLen, const char * pcCommandString );


/********************************** Structures that define CLI commands  *************************************/


// Structure that defines the ls command line command, which lists all the files in the current directory.
static const CLI_Command_Definition_t xInfo = {
    "info",         /* The command string to type. */
    "info:\r\n Print some information about the disk\r\n",
    prvInfoCommand, /* The function to run. */
    0              /* No parameters are expected. */
};

// Structure that defines the ls command line command, which lists all the files in the current directory.
static const CLI_Command_Definition_t xLs = {
    "ls",         /* The command string to type. */
    "ls:\r\n Lists the files in the current directory\r\n",
    prvLsCommand, /* The function to run. */
    0              /* No parameters are expected. */
};

// Structure that defines the pwd command line command, which prints the current directory.
static const CLI_Command_Definition_t xPwd = {
    "pwd",         /* The command string to type. */
    "pwd:\r\n Displays current directory\r\n",
    prvPwdCommand, /* The function to run. */
    0              /* No parameters are expected. */
};

// Structure that defines the pwd command line command, which prints the current directory.
static const CLI_Command_Definition_t xChdir = {
    "chdir",         /* The command string to type. */
    "chdir <new_dir>:\r\n Change directory to <new_dir>\r\n",
    prvChdirCommand, /* The function to run. */
    1              /* No parameters are expected. */
};


/********************************** Private Function Definitions - for CLI commands ****************************/

// One of these commands for each activity invoked by the CLI

/**
 * Prints some status.
 *
 * Uses f_getfree - see http://elm-chan.org/fsw/ff/doc/getfree.html
 *
 */
static BaseType_t prvInfoCommand( char * pcWriteBuffer,
                                 size_t xWriteBufferLen,
                                 const char * pcCommandString ) {
    FRESULT res;
    FATFS *getFreeFs; 	  // Read information
    DWORD free_clusters;  // Free Clusters
    DWORD free_sectors;	  // Free Sectors
    DWORD total_sectors;  // Total Sectors
    TCHAR label[12]; 	  // Buffer for the volume label
    DWORD vsn; 			  // Volume serial number

	memset( pcWriteBuffer, 0x00, xWriteBufferLen );

	f_getlabel("", label, &vsn);
	pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "Label: %s\nSerial No: 0x%08x\n", (char *) label, vsn);

	// Get some statistics from the SD card
	res = f_getfree("", &free_clusters, &getFreeFs);

	if (res) {
    	pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "f_getfree() failed (%u)\r\n", res);
		return pdFALSE;
	}

	// Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
	free_sectors = free_clusters * getFreeFs->csize;

	pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen,
			"%10lu K total drive space.\r\n%10lu K available.\r\n",
			total_sectors / 2, free_sectors / 2);

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}

/**
 * Directory listing.
 *
 * This uses the CLI mechanism that allows you to return a partial result and expect the function to be called
 * again. That way I am printing one entry each time.
 */
static BaseType_t prvLsCommand( char * pcWriteBuffer,
                                 size_t xWriteBufferLen,
                                 const char * pcCommandString ) {
    FRESULT res;
    FILINFO fno;
    char cur_dir[128];
    UINT len = 128;

    // These are static for processing of multiple entries,one at a time
    static DIR dir;					// directory structure
    static uint16_t nfile = 0;		// count files
    static uint16_t ndir = 0;		// count directories
    static bool listing = false;	// True after we have processed the first entry

    memset( pcWriteBuffer, 0x00, xWriteBufferLen );

    if (!listing) {
    	// This is stuff to do the first time we enter this function.
    	res = f_getcwd(cur_dir, len);      /* Get current directory */

    	if (res) {
    		pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "f_getcwd res = %d\r\n", res);
    		return pdFALSE;
    	}
//    	else  {
//    		pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "cur_dir = %s\r\n", cur_dir);
//    	}

    	res = f_opendir(&dir, cur_dir);    /* Open the directory */

    	if (res) {
        	pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "Failed to open \"%s\". (%u)\r\n", cur_dir, res);
        	listing = false;
        	nfile = 0;
        	ndir = 0;
        	return pdFALSE;
    	}
    	else {
        	listing = true;
    	}
    }

    // Here when the directory  has been opened successfully.
    // This might be the first attempt to read for the directory, or not.
    res = f_readdir(&dir, &fno);                   /* Read a directory item */

    if (res != FR_OK || fno.fname[0] == 0) {
    	// Error or end of dir
        pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "%d dirs, %d files.\r\n", ndir, nfile);

    	f_closedir(&dir);
    	listing = false;
    	nfile = 0;
    	ndir = 0;
    	return pdFALSE;
    }

    pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen,
    		"%c%c%c%c%c %u-%02u-%02u, %02u:%02u %10d %s",
    					((fno.fattrib & AM_DIR) ? 'D' : '-'),
    					((fno.fattrib & AM_RDO) ? 'R' : '-'),
    					((fno.fattrib & AM_SYS) ? 'S' : '-'),
    					((fno.fattrib & AM_HID) ? 'H' : '-'),
    					((fno.fattrib & AM_ARC) ? 'A' : '-'),
    					((fno.fdate >> 9) + 1980), (fno.fdate >> 5 & 15),
    					(fno.fdate & 31), (fno.ftime >> 11), (fno.ftime >> 5 & 63),
    					(int) fno.fsize, fno.fname);
    if (fno.fattrib & AM_DIR) {
    	// Directory
    	//pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "   <DIR>   %s", fno.fname);
    	ndir++;
    }
    else {
    	// File
    	//pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "%10u %s", (int) fno.fsize, fno.fname);
    	nfile++;
    }
    // Assume there is more to come
	return pdTRUE;
}

/**
 * Print current directory
 *
 * See
 */

static BaseType_t prvPwdCommand( char * pcWriteBuffer,
                                 size_t xWriteBufferLen,
                                 const char * pcCommandString ) {
    FRESULT res;
    char cur_dir[128];
    UINT len = 128;

	memset( pcWriteBuffer, 0x00, xWriteBufferLen );

    res = f_getcwd(cur_dir, len);      /* Get current directory */

	if (res)  {
		pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "f_getcwd res = %d\r\n", res);
	}
	else  {
		pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "cur_dir = %s\r\n", cur_dir);
	}
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}


/**
 * Change directory
 * See http://elm-chan.org/fsw/ff/doc/chdir.html
 *
 */
static BaseType_t prvChdirCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ) {
    FRESULT res;
	const char *pcParameter;
	BaseType_t lParameterStringLength;

	/* Get parameter */
	pcParameter = FreeRTOS_CLIGetParameter(pcCommandString, 1, &lParameterStringLength);
	if (pcParameter != NULL) {
		//Maybe some checking here?
		res = f_chdir(pcParameter);
	}
	else {
		pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "Must supply directory name.\r\n");
		return pdFALSE;
	}

    if (res == FR_OK) {
    	// TODO remove this when done.
		pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "OK\r\n");
    }
    else {
		pcWriteBuffer += snprintf(pcWriteBuffer, xWriteBufferLen, "f_chdir failed: %d\r\n", res);
    }

	return pdFALSE;
}


/********************************** Private Function Definitions - Other **************************/

/**
 * Register CLI commands
 */
static void vRegisterCLICommands( void ) {
	FreeRTOS_CLIRegisterCommand( &xInfo );
	FreeRTOS_CLIRegisterCommand( &xLs );
	FreeRTOS_CLIRegisterCommand( &xPwd );
	FreeRTOS_CLIRegisterCommand( &xChdir );
}

/********************************** Public Function Definitions  *************************************/

void cli_fatfs_init(void) {

	/* Register available CLI commands */
	vRegisterCLICommands();
}
