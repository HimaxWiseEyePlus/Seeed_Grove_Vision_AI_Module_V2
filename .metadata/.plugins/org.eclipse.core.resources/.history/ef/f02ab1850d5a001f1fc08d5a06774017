/*
 * task2.c
 *
 *  Created on: 12 Aug 2024
 *      Author: CGP
 *
 * FreeRTOS task
 *
 */


/*************************************** Includes *******************************************/

#include <stdio.h>
#include <stdlib.h>
#include "WE2_device.h"
#include "WE2_core.h"
#include "board.h"

#include "printf_x.h"
#include "xprintf.h"

// FreeRTOS kernel includes.
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"

#include "task1.h"
#include "app_msg.h"
#include "if_task.h"
#include "ww130_cli.h"

/*************************************** Definitions *******************************************/

#define IFTASK_QUEUE_LEN   		10

/*************************************** Local Function Declarations *****************************/

static void vIfTask(void *pvParameters);


// These are separate event handlers, one for each of the possible state machine state
static APP_MSG_DEST_T  handleEventForInit(APP_MSG_T rxMessage);
static APP_MSG_DEST_T  handleEventForStateI2C(APP_MSG_T rxMessage);
static APP_MSG_DEST_T  handleEventForStatePA0(APP_MSG_T rxMessage);
static APP_MSG_DEST_T  handleEventForError(APP_MSG_T rxMessage);

// This is to process an unexpected event
static APP_MSG_DEST_T  flagUnexpectedEvent(APP_MSG_T rxMessage);

/*************************************** Local variables *******************************************/

// This is the handle of the task
TaskHandle_t ifTask_task_id;

QueueHandle_t     xIfTaskQueue;

volatile APP_IF_STATE_E if_task_state = APP_IF_STATE_UNINIT;

// Strings for each of these states. Values must match APP_TASK1_STATE_E in task1.h
const char * ifTaskStateString[APP_IF_STATE_ERROR + 1] = {
		"Uninitialised",
		"Initialised",
		"I2C State",
		"PA0 State",
		"Error"
};

// Strings for expected messages. Values must match Messages directed to Task 2 in app_msg.h
const char* ifTaskEventString[3] = {
		"IF Task Msg0",
		"IF Task Msg1",
		"IF Task Msg2"
};

/*************************************** Local Function Definitions *****************************/

/**
 * Implements state machine when in APP_TASK1_STATE_INIT
 *
 * Let's say that in APP_TASK1_STATE_INIT we expect only APP_MSG_TASK1_MSG0 and use it to switch to APP_TASK1_STATE_2
 * And that any other event moves us to APP_TASK1_STATE_ERROR
 */
static APP_MSG_DEST_T handleEventForInit(APP_MSG_T rxMessage) {
	APP_MSG_EVENT_E event;
	//uint32_t data;
	APP_MSG_DEST_T sendMsg;
	sendMsg.destination = NULL;

	event = rxMessage.msg_event;
	//data = rxMessage.msg_data;

	switch (event) {
	case APP_MSG_IFTASK_MSG0:
		//
		if_task_state = APP_IF_STATE_I2C;
		break;

	default:
		// Here for events that are not expected in this state.
		flagUnexpectedEvent(rxMessage);
		task1_state = APP_IF_STATE_ERROR;
		break;
	}

	// If non-null then our task sends another message to another task
	return sendMsg;
}


static APP_MSG_DEST_T  handleEventForStateI2C(APP_MSG_T rxMessage) {
	APP_MSG_EVENT_E event;
	//uint32_t data;
	APP_MSG_DEST_T sendMsg;
	sendMsg.destination = NULL;

	event = rxMessage.msg_event;
	//data = rxMessage.msg_data;

	switch (event) {
	case APP_MSG_IFTASK_MSG0:
		//
		if_task_state = APP_IF_STATE_I2C;
		break;

	default:
		// Here for events that are not expected in this state.
		flagUnexpectedEvent(rxMessage);
		task1_state = APP_IF_STATE_ERROR;
		break;
	}

	// If non-null then our task sends another message to another task
	return sendMsg;
}

static APP_MSG_DEST_T  handleEventForStatePA0(APP_MSG_T rxMessage) {
	APP_MSG_EVENT_E event;
	//uint32_t data;
	APP_MSG_DEST_T sendMsg;
	sendMsg.destination = NULL;

	event = rxMessage.msg_event;
	//data = rxMessage.msg_data;

	switch (event) {
	case APP_MSG_IFTASK_MSG0:
		//
		if_task_state = APP_IF_STATE_I2C;
		break;

	default:
		// Here for events that are not expected in this state.
		flagUnexpectedEvent(rxMessage);
		task1_state = APP_IF_STATE_ERROR;
		break;
	}

	// If non-null then our task sends another message to another task
	return sendMsg;

}

static APP_MSG_DEST_T  handleEventForError(APP_MSG_T rxMessage) {
	APP_MSG_EVENT_E event;
	//uint32_t data;
	APP_MSG_DEST_T sendMsg;
	sendMsg.destination = NULL;

	event = rxMessage.msg_event;
	//data = rxMessage.msg_data;

	switch (event) {
	case APP_MSG_IFTASK_MSG0:
		//
		if_task_state = APP_IF_STATE_I2C;
		break;

	default:
		// Here for events that are not expected in this state.
		flagUnexpectedEvent(rxMessage);
		task1_state = APP_IF_STATE_ERROR;
		break;
	}

	// If non-null then our task sends another message to another task
	return sendMsg;
}

/**
 * FreeRTOS task responsible for handling interface with WW130
 */
static void vIfTask(void *pvParameters) {
    APP_MSG_T rxMessage;
    APP_MSG_T task2_send_msg;
	APP_IF_STATE_E old_state;
	const char * eventString;
	APP_MSG_EVENT_E event;
	uint32_t rxData;

	// One-off initialisation here...

	if_task_state = APP_IF_STATE_INIT;

	// The task loops forever here, waiting for messages to arrive in its input queue
	// The task loops forever here, waiting for messages to arrive in its input queue
	for (;;)  {
		if (xQueueReceive ( xIfTaskQueue , &(rxMessage) , __QueueRecvTicksToWait ) == pdTRUE ) {
			// convert event to a string
			event = rxMessage.msg_event;
			rxData =rxMessage.msg_data;

			if ((event >= APP_MSG_IFTASK_MSG0) && (event <= APP_MSG_IFTASK_MSG2)) {
				eventString = ifTaskEventString[event - APP_MSG_IFTASK_MSG0];
			}
			else {
				eventString = "Unexpected";
			}

			XP_LT_CYAN
			xprintf("\nIF Task");
			XP_WHITE;
			xprintf(" received event '%s' (0x%04x). Value = 0x%08x\r\n", eventString, event, rxData);\

			old_state = if_task_state;

    		// switch on state - and call individual event handling functions
    		switch (if_task_state) {

    		case APP_IF_STATE_UNINIT:
    			txMessage = flagUnexpectedEvent(rxMessage);
    			break;

    		case APP_IF_STATE_INIT:
    			txMessage = handleEventForInit(rxMessage);
    			break;

    		case APP_IF_STATE_I2C:
    			txMessage = handleEventForStateI2C(rxMessage);
    			break;

    		case APP_IF_STATE_PA0:
    			txMessage = handleEventForStatePA0(rxMessage);
    			break;

    		case APP_IF_STATE_ERROR:
    			txMessage = handleEventForError(rxMessage);
    			break;

    		default:
    			// should not happen
    			txMessage = flagUnexpectedEvent(rxMessage);
    			break;
    		}

    		if (old_state != if_task_state) {
    			// state has changed
        		XP_LT_CYAN;
        		xprintf("IF Task state changed ");
        		XP_WHITE;
        		xprintf("from '%s' (%d) to '%s' (%d)\r\n",
        				ifTaskStateString[old_state], old_state,
						ifTaskStateString[if_task_state], if_task_state);
    		}

    		// The processing functions might want us to send a message to another task
    		if (txMessage.destination == NULL) {
				xprintf("No outgoing messages.\n");
    		}
    		else {
    			send_msg = txMessage.message;
    			targetQueue = txMessage.destination;

    			if(xQueueSend( targetQueue , (void *) &send_msg , __QueueSendTicksToWait) != pdTRUE) {
    				xprintf("send send_msg=0x%x fail\r\n", send_msg.msg_event);
    			}
    			else {
    				xprintf("Sending event 0x%04x. Value = 0x%08x\r\n", send_msg.msg_event, send_msg.msg_data);
    			}

    		}
        }
	}	// for(;;)
}

/*************************************** Exported Function Definitions *****************************/

/**
 * Called by main() to create this task and anything that it needs.
 *
 * The main() code will call vTaskStartScheduler(); to begin FreeRTOS scheduler
 */
void ifTask_createTaskTask(void) {

	xIfTaskQueue = xQueueCreate( IFTASK_QUEUE_LEN, sizeof(APP_MSG_T) );

	if(xIfTaskQueue == 0) {
        xprintf("xIfTaskQueue creation failed!.\r\n");

		configASSERT(0);	// TODO add debug messages?
	}

	if (xTaskCreate(vIfTask, (const char *)"IFTask",
			configMINIMAL_STACK_SIZE,
			NULL, if_task_PRIORITY,
			&ifTask_task_id) != pdPASS)  {
        xprintf("vIfTask creation failed!.\r\n");

		configASSERT(0);	// TODO add debug messages?
	}
}


/**
 * Returns the internal state as a number
 */
uint16_t ifTask_getTaskState(void) {
	return if_task_state;
}

/**
 * Returns the internal state as a string
 */
const char * ifTask_getTaskStateString(void) {
	return * &ifTaskStateString[if_task_state];
}

