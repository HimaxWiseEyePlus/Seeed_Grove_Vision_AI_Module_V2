/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 29.07.2024 09:47:13

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace tflite {
namespace ops {
namespace micro {
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 15312;
#else
constexpr int kTensorArenaSize = 14288;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_ETHOSU,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 1;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 6;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) uint8_t tensor_data1[3116] = { 67, 79, 80, 49, 1, 0, 16, 0, 6, 16, 0, 0, 0, 0, 6, 16, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 2, 0, 3, 3, 48, 1, 0, 0, 48, 64, 0, 0, 176, 5, 0, 0, 49, 1, 1, 0, 49, 64, 0, 0, 112, 41, 0, 0, 50, 64, 0, 0, 224, 0, 0, 0, 16, 0, 0, 0, 15, 1, 1, 0, 0, 64, 0, 0, 0, 39, 0, 0, 1, 64, 0, 0, 0, 0, 0, 0, 2, 64, 0, 0, 0, 0, 0, 0, 3, 64, 0, 0, 0, 0, 0, 0, 11, 1, 47, 0, 12, 1, 47, 0, 10, 1, 12, 0, 4, 1, 0, 0, 6, 64, 0, 0, 1, 0, 0, 0, 5, 64, 0, 0, 13, 0, 0, 0, 4, 64, 0, 0, 1, 0, 0, 0, 9, 1, 4, 0, 5, 1, 1, 0, 7, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 3, 1, 1, 0, 2, 1, 1, 0, 31, 1, 1, 0, 16, 64, 0, 0, 0, 0, 0, 0, 17, 64, 0, 0, 0, 0, 0, 0, 18, 64, 0, 0, 0, 0, 0, 0, 19, 64, 0, 0, 0, 0, 0, 0, 27, 1, 47, 0, 28, 1, 47, 0, 26, 1, 12, 0, 18, 1, 47, 0, 17, 1, 12, 0, 19, 1, 7, 0, 22, 64, 0, 0, 208, 0, 0, 0, 21, 64, 0, 0, 208, 0, 0, 0, 20, 64, 0, 0, 16, 0, 0, 0, 24, 1, 128, 255, 20, 1, 65, 0, 33, 1, 2, 0, 32, 1, 2, 0, 34, 1, 4, 0, 40, 1, 1, 0, 32, 64, 0, 0, 192, 41, 0, 0, 33, 64, 0, 0, 144, 0, 0, 0, 41, 1, 1, 0, 34, 64, 0, 0, 112, 41, 0, 0, 35, 64, 0, 0, 80, 0, 0, 0, 37, 1, 0, 0, 38, 1, 128, 255, 39, 1, 127, 0, 22, 1, 15, 0, 21, 1, 7, 0, 23, 1, 7, 0, 13, 1, 6, 0, 45, 1, 8, 0, 36, 1, 0, 0, 47, 1, 0, 0, 17, 0, 0, 0, 2, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 4, 1, 7, 0, 6, 64, 0, 0, 208, 0, 0, 0, 5, 64, 0, 0, 208, 0, 0, 0, 4, 64, 0, 0, 16, 0, 0, 0, 9, 1, 128, 255, 5, 1, 65, 0, 0, 1, 0, 0, 1, 1, 0, 0, 3, 1, 0, 0, 16, 64, 0, 0, 0, 39, 0, 0, 27, 1, 23, 0, 28, 1, 23, 0, 26, 1, 6, 0, 18, 1, 23, 0, 17, 1, 6, 0, 22, 64, 0, 0, 112, 0, 0, 0, 21, 64, 0, 0, 112, 0, 0, 0, 33, 1, 1, 0, 32, 1, 1, 0, 34, 1, 3, 0, 21, 1, 4, 0, 13, 1, 8, 0, 47, 1, 2, 0, 5, 0, 0, 0, 48, 64, 0, 0, 144, 6, 0, 0, 49, 64, 0, 0, 128, 49, 0, 0, 50, 64, 0, 0, 208, 5, 0, 0, 16, 0, 0, 0, 0, 64, 0, 0, 0, 39, 0, 0, 11, 1, 23, 0, 12, 1, 23, 0, 10, 1, 6, 0, 6, 64, 0, 0, 112, 0, 0, 0, 5, 64, 0, 0, 112, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 3, 1, 1, 0, 16, 64, 0, 0, 0, 0, 0, 0, 19, 1, 15, 0, 33, 1, 2, 0, 32, 1, 2, 0, 34, 1, 4, 0, 32, 64, 0, 0, 32, 50, 0, 0, 33, 64, 0, 0, 48, 5, 0, 0, 34, 64, 0, 0, 128, 49, 0, 0, 35, 64, 0, 0, 160, 0, 0, 0, 22, 1, 11, 0, 21, 1, 6, 0, 23, 1, 15, 0, 13, 1, 4, 0, 45, 1, 4, 0, 47, 1, 1, 0, 17, 0, 0, 0, 2, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 4, 1, 15, 0, 0, 1, 0, 0, 1, 1, 0, 0, 3, 1, 0, 0, 16, 64, 0, 0, 128, 10, 0, 0, 27, 1, 11, 0, 28, 1, 11, 0, 26, 1, 3, 0, 18, 1, 11, 0, 17, 1, 3, 0, 22, 64, 0, 0, 1, 0, 0, 0, 21, 64, 0, 0, 64, 0, 0, 0, 20, 1, 1, 0, 33, 1, 1, 0, 32, 1, 1, 0, 34, 1, 3, 0, 22, 1, 9, 0, 21, 1, 2, 0, 13, 1, 6, 0, 45, 1, 12, 0, 47, 1, 0, 0, 5, 0, 0, 0, 0, 64, 0, 0, 128, 10, 0, 0, 11, 1, 0, 0, 12, 1, 0, 0, 10, 1, 0, 0, 4, 1, 255, 2, 6, 64, 0, 0, 1, 0, 0, 0, 5, 64, 0, 0, 0, 3, 0, 0, 4, 64, 0, 0, 0, 3, 0, 0, 5, 1, 1, 0, 2, 1, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 27, 1, 0, 0, 28, 1, 0, 0, 26, 1, 0, 0, 18, 1, 0, 0, 17, 1, 0, 0, 19, 1, 2, 0, 21, 64, 0, 0, 3, 0, 0, 0, 20, 64, 0, 0, 3, 0, 0, 0, 24, 1, 0, 0, 33, 1, 0, 0, 32, 1, 0, 0, 34, 1, 0, 0, 40, 1, 0, 0, 32, 64, 0, 0, 128, 12, 0, 0, 33, 64, 0, 0, 240, 10, 0, 0, 41, 1, 0, 0, 34, 64, 0, 0, 96, 12, 0, 0, 35, 64, 0, 0, 32, 0, 0, 0, 22, 1, 0, 0, 21, 1, 0, 0, 23, 1, 7, 0, 13, 1, 4, 0, 47, 1, 3, 0, 2, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 10, 1, 2, 0, 4, 1, 0, 0, 5, 64, 0, 0, 3, 0, 0, 0, 4, 64, 0, 0, 1, 0, 0, 0, 9, 1, 0, 0, 16, 64, 0, 0, 80, 0, 0, 0, 19, 1, 0, 0, 22, 64, 0, 0, 16, 0, 0, 0, 21, 64, 0, 0, 16, 0, 0, 0, 20, 64, 0, 0, 16, 0, 0, 0, 20, 1, 65, 0, 32, 1, 2, 0, 47, 1, 0, 0, 5, 0, 0, 0, 48, 64, 0, 0, 16, 1, 0, 0, 49, 1, 3, 1, 49, 64, 0, 0, 0, 56, 0, 0, 50, 64, 0, 0, 0, 4, 0, 0, 18, 0, 0, 0, 16, 0, 0, 0, 37, 64, 0, 0, 1, 0, 0, 0, 38, 64, 0, 0, 1, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 10, 1, 0, 0, 4, 1, 2, 0, 4, 64, 0, 0, 3, 0, 0, 0, 16, 64, 0, 0, 16, 0, 0, 0, 19, 1, 2, 0, 22, 64, 0, 0, 64, 0, 0, 0, 21, 64, 0, 0, 64, 0, 0, 0, 20, 64, 0, 0, 64, 0, 0, 0, 24, 1, 127, 0, 20, 1, 69, 1, 37, 1, 16, 48, 13, 1, 14, 0, 45, 1, 14, 0, 141, 1, 4, 0, 143, 1, 1, 0, 128, 64, 0, 0, 80, 0, 0, 0, 129, 64, 0, 0, 0, 0, 0, 0, 130, 64, 0, 0, 0, 0, 0, 0, 131, 64, 0, 0, 0, 0, 0, 0, 139, 1, 0, 0, 140, 1, 0, 0, 138, 1, 0, 0, 134, 64, 0, 0, 16, 0, 0, 0, 133, 64, 0, 0, 16, 0, 0, 0, 132, 64, 0, 0, 16, 0, 0, 0, 137, 1, 0, 0, 133, 1, 65, 0, 128, 1, 4, 0, 17, 0, 0, 0, 6, 0, 2, 0, 0, 64, 0, 0, 16, 0, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 0, 0, 0, 0, 22, 64, 0, 0, 4, 0, 0, 0, 21, 64, 0, 0, 12, 0, 0, 0, 20, 64, 0, 0, 12, 0, 0, 0, 24, 1, 0, 0, 20, 1, 5, 128, 37, 1, 0, 0, 13, 1, 16, 0, 45, 1, 16, 0, 141, 1, 6, 0, 143, 1, 0, 0, 128, 64, 0, 0, 16, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 8, 0, 0, 64, 0, 0, 0, 0, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 12, 0, 0, 0, 4, 64, 0, 0, 12, 0, 0, 0, 5, 1, 9, 0, 16, 64, 0, 0, 208, 0, 0, 0, 19, 1, 0, 0, 22, 64, 0, 0, 64, 0, 0, 0, 21, 64, 0, 0, 64, 0, 0, 0, 20, 64, 0, 0, 64, 0, 0, 0, 20, 1, 69, 1, 32, 1, 0, 0, 13, 1, 6, 0, 45, 1, 12, 0, 5, 0, 2, 0, 0, 64, 0, 0, 208, 0, 0, 0, 4, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 16, 1, 0, 0, 20, 1, 69, 0, 13, 1, 16, 0, 45, 1, 16, 0, 6, 0, 7, 0, 15, 1, 0, 0, 0, 64, 0, 0, 32, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 16, 64, 0, 0, 80, 0, 0, 0, 20, 1, 69, 1, 143, 1, 1, 0, 128, 64, 0, 0, 16, 1, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 128, 1, 0, 0, 6, 0, 2, 0, 15, 1, 1, 0, 0, 64, 0, 0, 16, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 144, 0, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 48, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 47, 1, 3, 0, 6, 0, 2, 0, 0, 64, 0, 0, 208, 0, 0, 0, 20, 1, 69, 0, 143, 1, 1, 0, 128, 64, 0, 0, 144, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 47, 1, 0, 0, 6, 0, 9, 0, 0, 64, 0, 0, 144, 0, 0, 0, 20, 1, 69, 1, 143, 1, 0, 0, 128, 64, 0, 0, 64, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 2, 0, 20, 1, 69, 0, 128, 64, 0, 0, 48, 5, 0, 0, 6, 0, 9, 0, 36, 64, 1, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 80, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 20, 1, 69, 1, 143, 1, 1, 0, 128, 64, 0, 0, 144, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 144, 0, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 16, 64, 0, 0, 16, 1, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 96, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 16, 1, 0, 0, 128, 64, 0, 0, 112, 5, 0, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 16, 64, 0, 0, 208, 0, 0, 0, 143, 1, 1, 0, 128, 64, 0, 0, 144, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 128, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 128, 64, 0, 0, 208, 0, 0, 0, 6, 0, 2, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 16, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 208, 0, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 144, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 0, 64, 0, 0, 16, 1, 0, 0, 143, 1, 1, 0, 128, 64, 0, 0, 208, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 0, 64, 0, 0, 208, 0, 0, 0, 16, 64, 0, 0, 16, 1, 0, 0, 128, 64, 0, 0, 144, 0, 0, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 128, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 128, 64, 0, 0, 16, 1, 0, 0, 6, 0, 2, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 208, 0, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 16, 1, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 144, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 0, 64, 0, 0, 208, 0, 0, 0, 143, 1, 1, 0, 128, 64, 0, 0, 16, 1, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 36, 64, 31, 0, 0, 0, 0, 64, 0, 64, 0, 0, 16, 1, 0, 0, 16, 64, 0, 0, 208, 0, 0, 0, 128, 64, 0, 0, 144, 0, 0, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 15, 1, 0, 0, 0, 64, 0, 0, 128, 5, 0, 0, 6, 64, 0, 0, 4, 0, 0, 0, 5, 64, 0, 0, 4, 0, 0, 0, 4, 64, 0, 0, 4, 0, 0, 0, 5, 1, 9, 0, 128, 64, 0, 0, 208, 0, 0, 0, 6, 0, 2, 0, 36, 64, 31, 0, 0, 0, 0, 64, 15, 1, 1, 0, 0, 64, 0, 0, 16, 1, 0, 0, 6, 64, 0, 0, 64, 0, 0, 0, 5, 64, 0, 0, 64, 0, 0, 0, 4, 64, 0, 0, 64, 0, 0, 0, 5, 1, 73, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 208, 0, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 144, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 0, 64, 0, 0, 16, 1, 0, 0, 143, 1, 1, 0, 128, 64, 0, 0, 208, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 6, 0, 1, 0, 0, 64, 0, 0, 208, 0, 0, 0, 143, 1, 0, 0, 128, 64, 0, 0, 160, 5, 0, 0, 134, 64, 0, 0, 4, 0, 0, 0, 133, 64, 0, 0, 4, 0, 0, 0, 132, 64, 0, 0, 4, 0, 0, 0, 133, 1, 9, 0, 6, 0, 0, 0, 36, 64, 31, 0, 0, 0, 0, 64, 0, 64, 0, 0, 16, 0, 0, 0, 4, 1, 2, 0, 16, 64, 0, 0, 144, 0, 0, 0, 19, 1, 2, 0, 143, 1, 1, 0, 128, 64, 0, 0, 208, 0, 0, 0, 134, 64, 0, 0, 64, 0, 0, 0, 133, 64, 0, 0, 64, 0, 0, 0, 132, 64, 0, 0, 64, 0, 0, 0, 133, 1, 73, 0, 128, 1, 4, 0, 6, 0, 0, 0, 36, 64, 0, 0, 1, 0, 0, 0, 0, 64, 0, 0, 144, 0, 0, 0, 16, 64, 0, 0, 0, 0, 0, 0, 22, 64, 0, 0, 1, 0, 0, 0, 21, 64, 0, 0, 3, 0, 0, 0, 20, 64, 0, 0, 3, 0, 0, 0, 24, 1, 128, 255, 20, 1, 1, 128, 128, 64, 0, 0, 80, 0, 0, 0, 6, 0, 8, 0, 0, 0, 255, 255, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3116 } };
const ALIGN(16) uint8_t tensor_data2[6000] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 17, 0, 0, 0, 19, 0, 0, 0, 21, 0, 0, 0, 23, 0, 0, 0, 26, 0, 0, 0, 29, 0, 0, 0, 32, 0, 0, 0, 35, 0, 0, 0, 39, 0, 0, 0, 44, 0, 0, 0, 48, 0, 0, 0, 54, 0, 0, 0, 60, 0, 0, 0, 66, 0, 0, 0, 74, 0, 0, 0, 82, 0, 0, 0, 91, 0, 0, 0, 101, 0, 0, 0, 112, 0, 0, 0, 124, 0, 0, 0, 138, 0, 0, 0, 153, 0, 0, 0, 170, 0, 0, 0, 189, 0, 0, 0, 210, 0, 0, 0, 233, 0, 0, 0, 2, 1, 0, 0, 31, 1, 0, 0, 63, 1, 0, 0, 98, 1, 0, 0, 137, 1, 0, 0, 180, 1, 0, 0, 228, 1, 0, 0, 26, 2, 0, 0, 85, 2, 0, 0, 152, 2, 0, 0, 225, 2, 0, 0, 50, 3, 0, 0, 141, 3, 0, 0, 241, 3, 0, 0, 97, 4, 0, 0, 221, 4, 0, 0, 102, 5, 0, 0, 255, 5, 0, 0, 168, 6, 0, 0, 101, 7, 0, 0, 54, 8, 0, 0, 30, 9, 0, 0, 32, 10, 0, 0, 63, 11, 0, 0, 125, 12, 0, 0, 222, 13, 0, 0, 103, 15, 0, 0, 26, 17, 0, 0, 254, 18, 0, 0, 23, 21, 0, 0, 108, 23, 0, 0, 3, 26, 0, 0, 227, 28, 0, 0, 20, 32, 0, 0, 160, 35, 0, 0, 143, 39, 0, 0, 239, 43, 0, 0, 202, 48, 0, 0, 46, 54, 0, 0, 43, 60, 0, 0, 209, 66, 0, 0, 52, 74, 0, 0, 103, 82, 0, 0, 130, 91, 0, 0, 159, 101, 0, 0, 218, 112, 0, 0, 83, 125, 0, 0, 45, 139, 0, 0, 142, 154, 0, 0, 163, 171, 0, 0, 155, 190, 0, 0, 172, 211, 0, 0, 17, 235, 0, 0, 11, 5, 1, 0, 229, 33, 1, 0, 238, 65, 1, 0, 130, 101, 1, 0, 5, 141, 1, 0, 230, 184, 1, 0, 160, 233, 1, 0, 188, 31, 2, 0, 212, 91, 2, 0, 143, 158, 2, 0, 171, 232, 2, 0, 247, 58, 3, 0, 92, 150, 3, 0, 218, 251, 3, 0, 144, 108, 4, 0, 187, 233, 4, 0, 187, 116, 5, 0, 24, 15, 6, 0, 132, 186, 6, 0, 226, 120, 7, 0, 73, 76, 8, 0, 14, 55, 9, 0, 197, 59, 10, 0, 76, 93, 11, 0, 210, 158, 12, 0, 225, 3, 14, 0, 102, 144, 15, 0, 190, 72, 17, 0, 192, 49, 19, 0, 204, 80, 21, 0, 222, 171, 23, 0, 149, 73, 26, 0, 79, 49, 29, 0, 60, 107, 32, 0, 112, 0, 36, 0, 2, 251, 39, 0, 37, 102, 44, 0, 75, 78, 49, 0, 67, 193, 54, 0, 103, 206, 60, 0, 191, 134, 67, 0, 56, 253, 74, 0, 212, 70, 83, 0, 233, 122, 92, 0, 96, 179, 102, 0, 3, 13, 114, 0, 195, 167, 126, 0, 32, 167, 140, 0, 130, 50, 156, 0, 176, 117, 173, 0, 61, 161, 192, 0, 42, 235, 213, 0, 103, 143, 237, 0, 130, 208, 7, 1, 106, 248, 36, 1, 50, 89, 69, 1, 4, 78, 105, 1, 38, 60, 145, 1, 251, 147, 189, 1, 97, 210, 238, 1, 254, 129, 37, 2, 208, 60, 98, 2, 198, 173, 165, 2, 206, 146, 240, 2, 206, 190, 67, 3, 231, 27, 160, 3, 49, 174, 6, 4, 110, 150, 120, 4, 117, 21, 247, 4, 39, 143, 131, 5, 78, 143, 31, 6, 22, 205, 204, 6, 60, 48, 141, 7, 127, 214, 98, 8, 71, 25, 80, 9, 171, 148, 87, 10, 187, 46, 124, 11, 11, 31, 193, 12, 166, 248, 41, 14, 112, 179, 186, 15, 8, 184, 119, 17, 174, 234, 101, 19, 123, 187, 138, 21, 165, 51, 236, 23, 252, 6, 145, 26, 86, 167, 128, 29, 166, 88, 195, 32, 252, 72, 98, 36, 92, 171, 103, 40, 197, 208, 222, 44, 143, 76, 212, 49, 168, 20, 86, 55, 74, 171, 115, 61, 171, 70, 62, 68, 105, 7, 201, 75, 59, 42, 41, 84, 10, 67, 118, 93, 166, 130, 202, 103, 117, 253, 66, 115, 255, 255, 255, 127, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 195, 195, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 90, 90, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 223, 255, 255, 255, 180, 161, 212, 108, 38, 96, 249, 255, 255, 255, 47, 62, 29, 77, 37, 49, 231, 255, 255, 255, 182, 242, 39, 96, 38, 222, 247, 255, 255, 255, 225, 248, 10, 89, 37, 34, 233, 255, 255, 255, 98, 201, 251, 67, 37, 112, 243, 255, 255, 255, 254, 193, 41, 118, 38, 168, 227, 255, 255, 255, 106, 159, 35, 118, 38, 128, 234, 255, 255, 255, 214, 163, 102, 65, 37, 51, 2, 208, 241, 253, 239, 255, 193, 175, 77, 237, 169, 135, 119, 69, 85, 132, 254, 189, 61, 45, 253, 156, 92, 28, 252, 155, 122, 26, 10, 250, 89, 249, 152, 216, 87, 103, 199, 0, 9, 251, 6, 232, 72, 78, 178, 34, 65, 133, 255, 255, 255, 206, 0, 244, 141, 64, 162, 254, 255, 255, 95, 124, 61, 185, 83, 215, 255, 255, 255, 231, 12, 112, 35, 121, 151, 17, 238, 219, 0, 211, 11, 46, 181, 225, 255, 255, 31, 207, 1, 222, 184, 3, 70, 255, 255, 255, 0, 6, 112, 172, 215, 224, 255, 255, 127, 121, 2, 244, 41, 230, 193, 50, 216, 255, 255, 255, 41, 64, 32, 228, 85, 132, 255, 255, 255, 127, 22, 87, 252, 255, 255, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 181, 247, 255, 255, 255, 27, 114, 196, 78, 38, 207, 210, 255, 255, 255, 242, 116, 104, 72, 38, 105, 239, 255, 255, 255, 111, 6, 37, 83, 38, 17, 250, 255, 255, 255, 1, 103, 75, 75, 38, 70, 253, 255, 255, 255, 184, 9, 153, 79, 38, 195, 247, 255, 255, 255, 110, 211, 128, 71, 38, 158, 232, 255, 255, 255, 246, 91, 108, 77, 38, 104, 240, 255, 255, 255, 235, 9, 63, 101, 38, 168, 200, 255, 255, 255, 80, 252, 205, 126, 39, 40, 30, 0, 0, 0, 70, 86, 56, 98, 38, 112, 237, 255, 255, 255, 85, 237, 3, 89, 38, 44, 240, 255, 255, 255, 53, 68, 176, 107, 38, 21, 249, 255, 255, 255, 182, 5, 82, 81, 38, 234, 26, 0, 0, 0, 231, 110, 200, 95, 38, 134, 231, 255, 255, 255, 171, 57, 18, 74, 38, 26, 246, 255, 255, 255, 190, 229, 100, 93, 38, 8, 2, 92, 1, 12, 0, 145, 30, 103, 90, 157, 163, 139, 245, 0, 112, 33, 102, 9, 75, 67, 69, 96, 10, 0, 157, 3, 53, 2, 85, 26, 27, 67, 29, 187, 4, 153, 17, 88, 241, 174, 0, 176, 190, 122, 57, 248, 190, 129, 34, 0, 0, 253, 59, 153, 116, 101, 37, 93, 141, 19, 23, 136, 30, 173, 32, 70, 42, 0, 112, 67, 151, 117, 209, 8, 168, 246, 150, 244, 10, 149, 64, 241, 105, 0, 176, 123, 94, 178, 54, 165, 195, 59, 177, 93, 128, 64, 239, 19, 150, 160, 159, 242, 123, 0, 104, 243, 16, 177, 78, 127, 219, 187, 195, 178, 56, 126, 102, 166, 11, 0, 183, 122, 78, 47, 245, 255, 105, 250, 54, 212, 156, 226, 62, 227, 0, 146, 202, 85, 86, 201, 171, 247, 3, 128, 201, 219, 198, 162, 176, 82, 215, 215, 233, 65, 91, 201, 159, 184, 199, 1, 160, 187, 4, 14, 195, 153, 67, 87, 110, 182, 249, 15, 190, 8, 0, 246, 62, 118, 21, 170, 51, 231, 137, 0, 160, 16, 248, 221, 137, 17, 119, 1, 96, 27, 102, 75, 136, 135, 181, 135, 228, 60, 121, 204, 146, 17, 22, 29, 0, 152, 183, 192, 113, 215, 32, 255, 6, 0, 101, 173, 191, 52, 128, 204, 143, 181, 238, 188, 1, 6, 152, 107, 228, 1, 192, 59, 160, 139, 110, 131, 202, 235, 214, 247, 112, 10, 168, 110, 1, 224, 175, 33, 221, 110, 222, 231, 239, 90, 98, 73, 177, 190, 4, 0, 115, 152, 126, 62, 251, 113, 173, 148, 31, 100, 8, 182, 234, 0, 0, 247, 27, 35, 214, 252, 232, 123, 0, 64, 178, 34, 244, 67, 117, 171, 60, 39, 0, 184, 154, 107, 112, 67, 207, 86, 105, 250, 125, 43, 234, 175, 253, 61, 0, 152, 150, 55, 59, 199, 124, 97, 201, 102, 109, 54, 84, 95, 7, 128, 248, 108, 113, 100, 224, 16, 17, 66, 7, 0, 124, 128, 100, 168, 244, 113, 178, 221, 200, 250, 111, 10, 127, 45, 0, 187, 11, 8, 189, 180, 84, 126, 116, 61, 134, 47, 253, 27, 0, 116, 220, 78, 46, 254, 153, 206, 144, 59, 59, 73, 223, 181, 0, 184, 74, 245, 247, 169, 32, 172, 108, 23, 0, 224, 209, 85, 43, 134, 213, 1, 100, 111, 36, 93, 62, 19, 0, 92, 236, 6, 206, 128, 3, 0, 93, 82, 253, 2, 97, 94, 43, 203, 0, 0, 48, 54, 82, 84, 144, 99, 177, 14, 0, 175, 185, 6, 81, 97, 159, 15, 142, 34, 114, 133, 244, 233, 20, 104, 93, 0, 160, 197, 214, 49, 204, 153, 6, 214, 0, 0, 109, 150, 253, 47, 85, 24, 104, 69, 12, 26, 138, 33, 48, 62, 8, 177, 0, 16, 180, 222, 241, 173, 51, 183, 55, 1, 0, 135, 134, 9, 193, 23, 145, 120, 253, 87, 64, 119, 93, 47, 81, 48, 231, 0, 112, 61, 183, 214, 47, 208, 15, 37, 2, 0, 57, 107, 9, 21, 63, 41, 203, 24, 1, 65, 34, 32, 29, 33, 104, 41, 0, 48, 25, 212, 146, 242, 213, 87, 99, 4, 0, 77, 107, 65, 26, 33, 253, 6, 151, 60, 11, 186, 95, 42, 77, 7, 92, 0, 192, 20, 6, 193, 243, 16, 51, 26, 1, 0, 39, 48, 33, 90, 47, 25, 60, 23, 62, 5, 180, 20, 111, 149, 136, 48, 0, 176, 90, 240, 224, 83, 146, 60, 98, 6, 0, 103, 82, 6, 79, 19, 22, 61, 38, 44, 76, 9, 168, 131, 138, 113, 24, 0, 224, 32, 241, 97, 119, 80, 77, 170, 0, 0, 24, 8, 28, 20, 110, 29, 63, 80, 41, 80, 171, 101, 53, 48, 65, 117, 252, 223, 151, 96, 179, 65, 118, 36, 245, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 3, 48, 0, 192, 1, 112, 1, 106, 4, 7, 32, 216, 184, 180, 196, 147, 176, 231, 127, 0, 96, 233, 7, 34, 200, 37, 139, 69, 2, 0, 118, 81, 170, 122, 108, 238, 38, 22, 238, 22, 22, 246, 22, 102, 159, 115, 0, 128, 4, 161, 80, 77, 81, 229, 142, 0, 0, 226, 218, 4, 142, 60, 214, 114, 168, 56, 112, 126, 69, 136, 122, 105, 118, 1, 32, 97, 212, 231, 21, 207, 147, 100, 131, 0, 226, 196, 208, 90, 250, 122, 66, 61, 42, 199, 199, 24, 158, 187, 90, 10, 0, 32, 42, 77, 103, 198, 103, 75, 32, 8, 0, 57, 116, 144, 16, 80, 72, 146, 31, 150, 61, 86, 251, 57, 222, 227, 234, 0, 96, 169, 239, 167, 161, 46, 160, 79, 5, 32, 164, 126, 30, 110, 77, 46, 117, 22, 1, 160, 104, 123, 195, 111, 114, 45, 235, 75, 37, 170, 108, 144, 98, 88, 231, 5, 0, 46, 166, 38, 210, 82, 58, 36, 44, 0, 128, 11, 129, 101, 34, 37, 129, 163, 8, 166, 6, 3, 77, 200, 237, 107, 2, 0, 154, 60, 106, 138, 118, 4, 146, 198, 0, 32, 1, 202, 139, 250, 132, 46, 166, 64, 164, 211, 142, 66, 228, 103, 82, 1, 0, 38, 77, 90, 63, 172, 42, 96, 128, 1, 224, 106, 165, 107, 110, 102, 182, 63, 102, 182, 238, 9, 238, 98, 110, 230, 8, 0, 160, 173, 11, 249, 9, 94, 180, 12, 0, 224, 197, 96, 237, 239, 69, 38, 235, 23, 15, 118, 99, 106, 39, 179, 77, 10, 0, 186, 112, 134, 139, 120, 36, 44, 150, 1, 64, 32, 160, 184, 70, 163, 168, 141, 32, 130, 134, 139, 44, 238, 163, 130, 3, 0, 78, 190, 160, 54, 231, 22, 63, 19, 0, 98, 246, 162, 116, 142, 161, 19, 162, 95, 2, 227, 105, 45, 32, 128, 134, 1, 0, 20, 96, 88, 18, 77, 150, 77, 230, 1, 32, 143, 166, 42, 97, 183, 63, 179, 135, 195, 196, 83, 173, 33, 128, 8, 6, 0, 50, 130, 109, 238, 12, 114, 142, 134, 0, 160, 9, 69, 161, 73, 103, 56, 108, 9, 189, 63, 111, 33, 107, 235, 98, 8, 0, 210, 190, 242, 30, 98, 96, 88, 8, 4, 0, 5, 166, 165, 227, 104, 36, 135, 164, 245, 226, 5, 224, 172, 38, 10, 5, 0, 116, 134, 6, 69, 42, 94, 35, 92, 0, 32, 36, 236, 4, 37, 44, 55, 35, 114, 0, 231, 167, 41, 19, 163, 14, 7, 0, 158, 56, 194, 48, 194, 132, 91, 244, 0, 128, 106, 244, 106, 250, 43, 178, 242, 39, 135, 138, 163, 8, 70, 224, 74, 133, 0, 166, 1, 26, 46, 58, 18, 24, 190, 0, 224, 181, 68, 103, 35, 251, 167, 102, 98, 84, 176, 218, 34, 112, 7, 34, 20, 0, 198, 12, 228, 136, 58, 91, 18, 94, 1, 64, 40, 187, 63, 123, 179, 233, 195, 131, 240, 128, 237, 203, 242, 41, 98, 1, 0, 74, 53, 230, 26, 32, 46, 191, 26, 0, 224, 121, 33, 130, 33, 145, 5, 0, 138, 165, 130, 44, 163, 18, 2, 65, 7, 0, 116, 202, 53, 78, 187, 98, 46, 193, 0, 32, 48, 228, 53, 226, 40, 237, 227, 5, 141, 160, 98, 128, 164, 133, 164, 31, 0, 216, 182, 129, 222, 191, 70, 147, 12, 1, 224, 165, 161, 41, 7, 165, 27, 114, 160, 77, 102, 149, 7, 38, 99, 248, 5, 1, 10, 121, 250, 134, 58, 54, 54, 24, 0, 192, 32, 75, 6, 32, 161, 212, 192, 12, 0, 92, 156, 10, 144, 78, 12, 18, 70, 183, 28, 92, 254, 44, 24, 80, 30, 1, 160, 193, 106, 35, 93, 42, 6, 74, 160, 105, 165, 52, 224, 144, 97, 0, 128, 243, 255, 255, 243, 15, 128, 255, 255, 255, 255, 159, 250, 255, 255, 255, 218, 81, 135, 86, 40, 108, 16, 0, 0, 0, 218, 81, 135, 86, 40, 246, 246, 255, 255, 255, 218, 81, 135, 86, 40, 0, 0, 16, 71, 84, 1, 124, 235, 0, 96, 233, 69, 148, 251, 118, 106, 182, 21, 112, 3, 144, 142, 24, 181, 100, 75, 34, 196, 97, 255, 255, 100, 140, 97, 67, 235, 228, 255, 241, 59, 212, 218, 26, 215, 255, 63, 192, 102, 3, 128, 110, 91, 212, 44, 88, 99, 221, 119, 13, 248, 87, 66, 0, 55, 148, 36, 255, 159, 203, 199, 134, 38, 10, 177, 255, 255, 7, 0, 72, 170, 0, 240, 242, 203, 242, 199, 186, 210, 229, 190, 250, 127, 130, 255, 175, 106, 36, 74, 20, 103, 83, 253, 63, 0, 84, 253, 32, 0, 48, 60, 194, 7, 204, 136, 156, 39, 216, 203, 255, 23, 232, 85, 132, 84, 39, 93, 205, 253, 127, 6, 193, 49, 182, 42, 64, 242, 255, 31, 0, 0, 134, 77, 129, 255, 147, 41, 75, 216, 150, 134, 100, 251, 255, 167, 255, 207, 237, 63, 2, 19, 246, 15, 0, 16, 181, 146, 32, 0, 60, 183, 3, 215, 202, 15, 108, 254, 191, 68, 109, 152, 126, 96, 88, 36, 253, 255, 255, 3, 0, 95, 86, 100, 15, 0, 214, 250, 232, 110, 181, 57, 243, 118, 255, 223, 29, 72, 62, 222, 92, 255, 223, 181, 38, 162, 250, 255, 7, 240, 115, 0, 64, 98, 234, 245, 39, 231, 114, 85, 10, 64, 221, 22, 254, 171, 165, 71, 92, 87, 241, 255, 185, 160, 118, 206, 251, 255, 127, 240, 44, 0, 112, 119, 69, 103, 16, 40, 94, 72, 179, 7, 248, 32, 149, 224, 109, 173, 229, 255, 127, 111, 89, 1, 183, 150, 231, 255, 255, 31, 16, 44, 219, 181, 151, 0, 64, 214, 224, 10, 111, 11, 227, 247, 255, 95, 198, 72, 136, 76, 160, 35, 251, 255, 165, 46, 19, 69, 192, 255, 127, 128, 149, 7, 128, 129, 218, 130, 127, 126, 249, 186, 134, 17, 34, 206, 159, 246, 255, 66, 32, 28, 93, 46, 249, 127, 211, 8, 187, 24, 11, 115, 254, 1, 2, 178, 99, 1, 248, 51, 57, 126, 133, 116, 179, 11, 255, 175, 255, 255, 0, 155, 14, 99, 195, 255, 3, 192, 201, 104, 148, 14, 0, 83, 218, 188, 119, 52, 25, 39, 148, 255, 23, 225, 87, 19, 178, 216, 248, 255, 102, 159, 88, 249, 155, 33, 224, 255, 63, 192, 169, 3, 64, 136, 84, 194, 255, 240, 201, 162, 1, 2, 57, 226, 255, 189, 73, 28, 219, 35, 175, 249, 255, 255, 48, 19, 0, 176, 169, 5, 240, 60, 154, 255, 201, 84, 182, 255, 158, 255, 159, 158, 7, 237, 72, 167, 241, 255, 65, 189, 229, 202, 255, 3, 192, 242, 13, 186, 55, 0, 200, 102, 134, 11, 95, 127, 95, 91, 255, 255, 86, 8, 12, 196, 173, 245, 255, 39, 8, 188, 222, 184, 255, 255, 0, 153, 12, 0, 205, 249, 51, 237, 82, 82, 120, 4, 43, 185, 24, 254, 27, 240, 2, 0, 232, 252, 255, 23, 208, 220, 98, 245, 255, 255, 127, 224, 77, 0, 200, 127, 27, 192, 19, 231, 170, 56, 251, 120, 191, 253, 63, 21, 61, 11, 129, 17, 188, 255, 111, 117, 233, 97, 142, 153, 255, 15, 0, 81, 90, 0, 128, 240, 170, 7, 160, 114, 218, 200, 188, 106, 254, 255, 139, 233, 234, 17, 107, 185, 255, 151, 70, 213, 231, 93, 250, 255, 255, 0, 239, 14, 0, 3, 220, 45, 252, 203, 185, 97, 24, 88, 74, 82, 41, 230, 254, 95, 147, 5, 109, 48, 147, 250, 255, 64, 190, 154, 244, 14, 240, 15, 0, 16, 18, 0, 255, 205, 252, 127, 144, 194, 242, 18, 111, 129, 251, 255, 48, 8, 20, 66, 127, 222, 252, 255, 3, 64, 60, 1, 208, 84, 67, 163, 89, 17, 216, 177, 75, 252, 127, 54, 227, 224, 246, 232, 175, 255, 255, 255, 15, 128, 53, 0, 178, 84, 63, 130, 0, 74, 208, 67, 133, 195, 127, 92, 183, 13, 14, 163, 58, 255, 255, 255, 177, 245, 255, 70, 48, 31, 253, 63, 228, 62, 0, 188, 125, 175, 140, 42, 245, 120, 152, 12, 224, 95, 192, 231, 0, 21, 248, 216, 253, 127, 167, 227, 109, 56, 168, 241, 255, 55, 226, 55, 32, 5, 254, 31, 0, 216, 26, 16, 98, 111, 251, 255, 145, 253, 1, 226, 0, 238, 234, 255, 55, 42, 208, 253, 69, 252, 255, 3, 180, 22, 0, 180, 191, 222, 198, 227, 237, 209, 242, 33, 17, 252, 95, 217, 189, 37, 72, 255, 111, 81, 121, 95, 17, 95, 255, 255, 31, 40, 3, 0, 8, 179, 1, 222, 42, 81, 242, 77, 150, 9, 13, 249, 212, 255, 47, 225, 92, 101, 40, 74, 194, 255, 55, 77, 64, 177, 16, 254, 63, 0, 172, 49, 0, 160, 122, 175, 181, 141, 164, 170, 242, 97, 170, 110, 243, 255, 144, 42, 151, 175, 230, 255, 235, 49, 41, 53, 35, 4, 249, 255, 255, 0, 114, 0, 0, 109, 170, 240, 143, 15, 231, 68, 75, 42, 138, 255, 87, 189, 188, 176, 92, 158, 255, 255, 15, 203, 9, 0, 247, 218, 127, 204, 161, 224, 86, 137, 43, 192, 3, 134, 239, 65, 194, 255, 135, 81, 243, 88, 227, 204, 98, 202, 255, 255, 63, 0, 253, 7, 12, 16, 144, 86, 58, 0, 156, 153, 224, 87, 164, 234, 225, 255, 221, 21, 6, 56, 131, 248, 255, 255, 73, 47, 228, 81, 226, 255, 255, 0, 28, 13, 4, 195, 84, 193, 255, 14, 123, 106, 32, 28, 86, 233, 255, 87, 224, 101, 95, 253, 255, 255, 1, 197, 0, 64, 169, 29, 224, 181, 5, 159, 200, 193, 247, 135, 214, 210, 255, 111, 70, 172, 104, 108, 59, 255, 143, 137, 109, 107, 147, 247, 255, 0, 192, 204, 219, 42, 2, 192, 116, 108, 186, 250, 73, 165, 255, 255, 63, 68, 191, 28, 34, 105, 101, 248, 127, 76, 178, 108, 51, 65, 254, 255, 15, 96, 84, 0, 160, 67, 27, 254, 79, 54, 102, 161, 188, 149, 119, 185, 255, 223, 69, 79, 251, 121, 47, 248, 255, 155, 210, 103, 93, 248, 7, 0, 112, 121, 16, 63, 4, 248, 68, 39, 177, 234, 239, 212, 80, 253, 255, 235, 245, 129, 214, 14, 62, 249, 255, 255, 7, 128, 228, 44, 34, 23, 0, 138, 225, 64, 5, 133, 96, 226, 99, 232, 255, 123, 167, 43, 129, 120, 92, 253, 255, 79, 115, 79, 127, 70, 4, 255, 255, 0, 205, 4, 0, 68, 123, 193, 127, 83, 233, 34, 244, 7, 143, 230, 253, 255, 85, 32, 179, 80, 8, 254, 255, 31, 248, 9, 32, 142, 110, 0, 240, 9, 202, 14, 120, 164, 247, 230, 254, 63, 103, 41, 41, 82, 145, 15, 133, 255, 191, 64, 116, 42, 3, 251, 127, 0, 56, 51, 0, 232, 57, 175, 26, 103, 83, 220, 81, 182, 234, 255, 205, 53, 79, 69, 77, 227, 255, 15, 68, 155, 149, 154, 249, 255, 15, 208, 87, 0, 160, 230, 220, 236, 183, 144, 104, 30, 23, 236, 14, 255, 70, 40, 6, 183, 206, 253, 127, 59, 248, 202, 177, 209, 251, 255, 255, 240, 109, 0, 98, 111, 181, 0, 222, 230, 186, 58, 8, 247, 235, 255, 87, 57, 83, 104, 201, 36, 251, 255, 137, 196, 34, 147, 173, 255, 7, 128, 72, 86, 128, 224, 255, 128, 143, 54, 106, 14, 87, 115, 165, 233, 255, 191, 175, 74, 196, 252, 240, 255, 111, 156, 150, 24, 246, 255, 31, 160, 229, 0, 224, 82, 44, 240, 159, 140, 253, 9, 30, 77, 42, 242, 255, 205, 153, 129, 58, 121, 164, 170, 255, 79, 109, 113, 6, 11, 15, 206, 63, 32, 0, 17, 3, 124, 249, 253, 255, 55, 13, 80, 16, 162, 20, 175, 206, 255, 251, 16, 229, 186, 255, 15, 0, 82, 125, 102, 19, 0, 21, 10, 87, 64, 254, 35, 133, 245, 255, 185, 191, 102, 52, 104, 6, 129, 255, 207, 139, 132, 172, 36, 196, 255, 255, 0, 193, 0, 0, 121, 88, 248, 215, 33, 87, 120, 153, 43, 238, 202, 254, 223, 231, 31, 38, 59, 240, 255, 255, 97, 107, 0, 224, 117, 206, 224, 85, 9, 123, 137, 4, 248, 136, 178, 241, 104, 144, 226, 60, 255, 255, 244, 175, 255, 175, 206, 170, 51, 180, 195, 255, 247, 201, 191, 250, 1, 224, 207, 0, 64, 192, 219, 254, 127, 103, 57, 79, 195, 88, 172, 96, 30, 233, 253, 255, 158, 226, 25, 164, 252, 127, 205, 32, 75, 158, 31, 160, 251, 1, 160, 210, 127, 130, 127, 137, 89, 126, 235, 199, 48, 177, 255, 199, 12, 16, 87, 253, 107, 254, 255, 51, 209, 85, 112, 19, 199, 252, 7, 0, 200, 250, 0, 128, 239, 58, 101, 117, 154, 96, 140, 239, 254, 255, 223, 91, 176, 255, 159, 250, 8, 224, 255, 73, 188, 20, 52, 219, 55, 1, 0, 190, 5, 0, 68, 121, 254, 127, 241, 138, 86, 146, 154, 53, 52, 255, 159, 93, 172, 34, 52, 162, 255, 255, 1, 0, 6, 0, 22, 20, 248, 39, 104, 229, 73, 115, 244, 48, 255, 111, 55, 233, 164, 10, 115, 193, 255, 255, 127, 56, 112, 0, 48, 75, 14, 224, 207, 200, 230, 229, 240, 52, 85, 182, 255, 159, 125, 4, 180, 157, 156, 255, 127, 180, 11, 120, 103, 252, 255, 7, 0, 183, 52, 66, 59, 16, 140, 11, 14, 135, 180, 200, 102, 29, 255, 159, 105, 66, 149, 0, 100, 71, 254, 159, 182, 222, 138, 8, 203, 255, 255, 3, 128, 15, 0, 16, 155, 134, 255, 129, 14, 246, 253, 223, 106, 42, 228, 255, 85, 86, 10, 64, 217, 69, 249, 255, 127, 104, 82, 0, 216, 83, 18, 224, 211, 27, 88, 94, 154, 82, 252, 255, 95, 166, 221, 152, 241, 102, 215, 255, 95, 202, 24, 8, 8, 255, 15, 0, 223, 61, 233, 189, 2, 128, 105, 216, 70, 115, 31, 211, 226, 255, 19, 144, 7, 192, 130, 253, 63, 9, 152, 160, 162, 231, 251, 235, 255, 31, 96, 131, 0, 64, 224, 23, 252, 43, 211, 113, 187, 1, 192, 16, 130, 196, 241, 255, 245, 84, 65, 107, 108, 43, 255, 63, 111, 188, 88, 51, 241, 242, 127, 0, 128, 90, 2, 248, 125, 82, 254, 159, 101, 43, 76, 173, 244, 255, 137, 20, 199, 6, 98, 84, 253, 127, 0, 128, 192, 1, 192, 141, 18, 215, 139, 73, 40, 48, 118, 244, 255, 255, 178, 122, 80, 244, 101, 56, 255, 255, 207, 250, 111, 12, 64, 255, 255, 0, 177, 136, 128, 80, 65, 224, 127, 10, 153, 63, 95, 105, 171, 230, 255, 127, 137, 161, 248, 214, 114, 245, 255, 255, 1, 0, 38, 82, 21, 63, 192, 51, 246, 184, 29, 162, 66, 7, 188, 23, 255, 191, 71, 151, 214, 139, 247, 121, 255, 63, 30, 39, 89, 252, 63, 0, 52, 7, 0, 248, 223, 58, 141, 126, 212, 223, 35, 83, 255, 255, 172, 232, 89, 134, 175, 254, 127, 13, 14, 103, 151, 140, 255, 127, 128, 158, 2, 0, 149, 220, 193, 127, 57, 14, 113, 48, 80, 128, 173, 239, 255, 75, 75, 75, 253, 237, 63, 252, 127, 191, 243, 194, 19, 245, 127, 0, 128, 181, 62, 125, 6, 128, 103, 91, 195, 17, 163, 148, 74, 255, 207, 135, 97, 7, 147, 188, 213, 255, 239, 55, 204, 36, 206, 241, 255, 7, 128, 24, 1, 0, 210, 147, 255, 95, 9, 219, 107, 68, 86, 151, 241, 255, 239, 220, 40, 195, 56, 248, 255, 15, 16, 228, 0, 48, 173, 5, 184, 220, 120, 180, 132, 0, 240, 223, 149, 36, 106, 222, 175, 55, 10, 213, 240, 255, 229, 255, 129, 68, 232, 56, 231, 75, 255, 7, 0, 16, 54, 4, 240, 188, 132, 149, 230, 152, 91, 20, 237, 251, 255, 146, 255, 231, 210, 32, 136, 158, 90, 255, 15, 0, 45, 21, 0, 192, 172, 251, 227, 186, 202, 8, 241, 160, 113, 226, 255, 255, 90, 156, 187, 116, 33, 247, 251, 255, 91, 244, 227, 198, 224, 255, 127, 0, 194, 17, 0, 128, 127, 14, 203, 185, 129, 36, 122, 23, 136, 203, 255, 143, 255, 63, 41, 9, 130, 97, 38, 254, 3, 0, 132, 27, 230, 83, 0, 31, 71, 59, 54, 51, 38, 29, 95, 181, 254, 191, 62, 228, 17, 193, 134, 248, 255, 62, 216, 142, 213, 239, 255, 7, 128, 104, 5, 128, 176, 110, 254, 95, 97, 115, 11, 65, 60, 114, 199, 255, 223, 162, 121, 128, 34, 48, 255, 255, 15, 80, 175, 0, 112, 242, 127, 51, 146, 185, 136, 173, 124, 111, 5, 248, 47, 79, 130, 229, 195, 250, 127, 31, 75, 17, 26, 191, 248, 254, 255, 31, 0, 224, 112, 72, 251, 6, 120, 180, 205, 141, 100, 117, 22, 40, 201, 239, 255, 35, 194, 124, 78, 187, 41, 253, 191, 179, 3, 19, 138, 234, 43, 255, 15, 0, 160, 4, 0, 133, 180, 255, 39, 182, 136, 100, 180, 76, 1, 255, 63, 124, 100, 208, 79, 93, 141, 248, 255, 15, 32, 26, 0, 80, 166, 15, 255, 58, 163, 77, 53, 160, 32, 192, 2, 251, 255, 7, 174, 82, 0, 117, 254, 255, 119, 99, 132, 201, 156, 252, 197, 253, 3, 0, 160, 26, 192, 3, 240, 250, 127, 16, 120, 68, 13, 50, 81, 235, 182, 255, 95, 22, 92, 71, 30, 42, 106, 220, 255, 15, 0, 148, 11, 0, 195, 187, 254, 127, 230, 162, 84, 41, 144, 220, 163, 255, 255, 175, 186, 115, 243, 255, 255, 0, 126, 15, 128, 20, 169, 55, 252, 43, 221, 7, 28, 106, 230, 34, 54, 255, 127, 93, 89, 198, 22, 160, 127, 248, 255, 125, 118, 27, 5, 146, 127, 0, 0, 68, 52, 192, 47, 22, 237, 30, 120, 162, 225, 59, 255, 223, 244, 255, 101, 40, 46, 90, 102, 255, 15, 0, 181, 246, 202, 74, 0, 248, 233, 184, 178, 252, 148, 124, 193, 208, 80, 186, 43, 244, 254, 95, 65, 71, 53, 3, 175, 169, 230, 255, 159, 68, 186, 44, 179, 32, 249, 255, 7, 0, 144, 67, 67, 225, 191, 89, 101, 202, 1, 191, 247, 52, 249, 255, 243, 255, 171, 11, 213, 20, 61, 227, 31, 0, 96, 150, 238, 42, 3, 248, 161, 149, 2, 72, 35, 101, 241, 255, 200, 232, 95, 160, 239, 87, 162, 255, 119, 189, 209, 129, 118, 200, 183, 254, 63, 0, 16, 18, 2, 0, 113, 254, 127, 188, 65, 103, 195, 154, 107, 67, 242, 255, 31, 241, 41, 160, 62, 170, 250, 255, 7, 0, 0, 83, 15, 68, 41, 252, 207, 143, 96, 50, 1, 140, 17, 224, 255, 79, 31, 134, 35, 117, 210, 255, 255, 7, 192, 128, 23, 0, 240, 174, 1, 35, 108, 60, 163, 9, 156, 218, 255, 239, 248, 255, 50, 5, 200, 200, 70, 245, 255, 0, 32, 29, 7, 0, 98, 25, 176, 37, 145, 137, 248, 214, 85, 243, 255, 37, 87, 210, 144, 65, 252, 191, 43, 86, 34, 80, 78, 133, 255, 255, 0, 117, 2, 0, 115, 181, 195, 191, 191, 136, 242, 242, 84, 168, 141, 253, 127, 219, 103, 57, 229, 255, 133, 203, 235, 89, 124, 255, 225, 46, 1, 96, 252, 255, 1, 62, 9, 182, 104, 203, 68, 251, 88, 255, 79, 133, 115, 3, 53, 144, 7, 255, 223, 88, 50, 181, 165, 77, 254, 31, 0, 168, 78, 4, 128, 33, 49, 196, 36, 213, 133, 219, 158, 227, 105, 255, 191, 230, 103, 153, 166, 190, 250, 255, 47, 64, 74, 34, 78, 252, 255, 3, 248, 39, 0, 152, 90, 49, 248, 127, 59, 184, 135, 54, 72, 21, 229, 255, 197, 85, 169, 179, 111, 255, 223, 206, 152, 206, 30, 72, 38, 253, 7, 0, 40, 140, 100, 124, 151, 206, 161, 25, 164, 82, 166, 244, 255, 217, 255, 63, 0, 202, 90, 116, 128, 255, 15, 0, 121, 6, 0, 73, 213, 31, 74, 212, 25, 188, 199, 96, 180, 244, 255, 169, 102, 56, 160, 45, 51, 252, 255, 208, 100, 50, 226, 77, 55, 255, 255, 2, 0, 64, 167, 16, 252, 63, 80, 69, 81, 42, 121, 239, 220, 250, 255, 243, 254, 31, 38, 25, 226, 251, 255, 0, 0, 139, 189, 41, 0, 0, 112, 71, 124, 171, 51, 66, 15, 51, 0, 64, 1, 128, 15, 133, 255, 255, 255, };
const TfArray<1, int> tensor_dimension2 = { 1, { 6000 } };
const TfArray<1, int> tensor_dimension3 = { 1, { 14160 } };
const TfArray<1, int> tensor_dimension4 = { 1, { 14160 } };
const TfArray<2, int> tensor_dimension5 = { 2, { 1,624 } };
const TfArray<1, float> quant5_scale = { 1, { 0.039007842540740967, } };
const TfArray<1, int> quant5_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const uint8_t ALIGN(4) opdata0[3] = { 1, 4, 1,  }; /* custom_initial_data */
const TfArray<5, int> inputs0 = { 5, { 1,2,3,4,5 } };
const TfArray<1, int> outputs0 = { 1, { 0 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteUInt8, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 3116, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteUInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 6000, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteUInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension3, 14160, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteUInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension4, 14160, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9984), (TfLiteIntArray*)&g0::tensor_dimension5, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[1] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), const_cast<void*>(static_cast<const void*>(&g0::opdata0)), 3, },
};
#else
TfLiteNode tflNodes[1] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), const_cast<void*>(static_cast<const void*>(&g0::opdata0)), 3, },
};
#endif

used_operators_e used_ops[] =
{OP_ETHOSU, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 6, };
const size_t tflNodes_subgraph_index[] = {0, 1, };

// Input/output tensors
static const int in_tensor_indices[] = {
  5, 
};

static const int out_tensor_indices[] = {
  0, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 6;
  for (size_t i = 0; i < 6; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_ETHOSU] = *Register_ETHOSU();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, tflNodes[i].custom_initial_data_size);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 1; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
